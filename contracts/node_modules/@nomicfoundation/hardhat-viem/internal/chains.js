"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMode = exports.isDevelopmentNetwork = exports.getChain = void 0;
const lodash_memoize_1 = __importDefault(require("lodash.memoize"));
const errors_1 = require("./errors");
async function getChain(provider) {
    const { extractChain } = await Promise.resolve().then(() => __importStar(require("viem")));
    const chainsModule = await Promise.resolve().then(() => __importStar(require("viem/chains")));
    const chains = Object.values(chainsModule);
    const chainId = await getChainId(provider);
    if (isDevelopmentNetwork(chainId)) {
        if (await isHardhatNetwork(provider)) {
            return chainsModule.hardhat;
        }
        else if (await isFoundryNetwork(provider)) {
            return chainsModule.foundry;
        }
        else {
            throw new errors_1.UnknownDevelopmentNetworkError();
        }
    }
    const chain = extractChain({
        chains,
        id: chainId,
    });
    if (chain === undefined) {
        if (await isHardhatNetwork(provider)) {
            return {
                ...chainsModule.hardhat,
                id: chainId,
            };
        }
        else if (await isFoundryNetwork(provider)) {
            return {
                ...chainsModule.foundry,
                id: chainId,
            };
        }
        else {
            throw new errors_1.NetworkNotFoundError(chainId);
        }
    }
    return chain;
}
exports.getChain = getChain;
function isDevelopmentNetwork(chainId) {
    return chainId === 31337;
}
exports.isDevelopmentNetwork = isDevelopmentNetwork;
async function getMode(provider) {
    if (await isHardhatNetwork(provider)) {
        return "hardhat";
    }
    else if (await isFoundryNetwork(provider)) {
        return "anvil";
    }
    else {
        throw new errors_1.UnknownDevelopmentNetworkError();
    }
}
exports.getMode = getMode;
const getChainId = (0, lodash_memoize_1.default)(async (provider) => Number(await provider.send("eth_chainId")));
const isHardhatNetwork = (0, lodash_memoize_1.default)(async (provider) => detectNetworkByMethodName(provider, NetworkMethod.HARDHAT_METADATA));
const isFoundryNetwork = (0, lodash_memoize_1.default)(async (provider) => detectNetworkByMethodName(provider, NetworkMethod.ANVIL_NODE_INFO));
var NetworkMethod;
(function (NetworkMethod) {
    NetworkMethod["HARDHAT_METADATA"] = "hardhat_metadata";
    NetworkMethod["ANVIL_NODE_INFO"] = "anvil_nodeInfo";
})(NetworkMethod || (NetworkMethod = {}));
async function detectNetworkByMethodName(provider, methodName) {
    try {
        await provider.send(methodName);
        return true;
    }
    catch {
        return false;
    }
}
//# sourceMappingURL=chains.js.map